package cz.yogaboy.fintrack.ui.theme

import androidx.compose.material3.ColorScheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Immutable
import androidx.compose.runtime.staticCompositionLocalOf
import androidx.compose.ui.graphics.Color

@Immutable
data class FintrackColors(
    val primary: Color,
    val onPrimary: Color,
    val primaryContainer: Color,
    val onPrimaryContainer: Color,
    val secondary: Color,
    val onSecondary: Color,
    val secondaryContainer: Color,
    val onSecondaryContainer: Color,
    val tertiary: Color,
    val onTertiary: Color,
    val tertiaryContainer: Color,
    val onTertiaryContainer: Color,
    val error: Color,
    val onError: Color,
    val errorContainer: Color,
    val onErrorContainer: Color,
    val background: Color,
    val onBackground: Color,
    val surface: Color,
    val onSurface: Color,
    val surfaceVariant: Color,
    val onSurfaceVariant: Color,
    val outline: Color,
    val outlineVariant: Color,
    val inverseSurface: Color,
    val inverseOnSurface: Color,
    val inversePrimary: Color,
    val scrim: Color
)

val LocalColors = staticCompositionLocalOf {
    FintrackColors(
        primary = Color.Unspecified,
        onPrimary = Color.Unspecified,
        primaryContainer = Color.Unspecified,
        onPrimaryContainer = Color.Unspecified,
        secondary = Color.Unspecified,
        onSecondary = Color.Unspecified,
        secondaryContainer = Color.Unspecified,
        onSecondaryContainer = Color.Unspecified,
        tertiary = Color.Unspecified,
        onTertiary = Color.Unspecified,
        tertiaryContainer = Color.Unspecified,
        onTertiaryContainer = Color.Unspecified,
        error = Color.Unspecified,
        onError = Color.Unspecified,
        errorContainer = Color.Unspecified,
        onErrorContainer = Color.Unspecified,
        background = Color.Unspecified,
        onBackground = Color.Unspecified,
        surface = Color.Unspecified,
        onSurface = Color.Unspecified,
        surfaceVariant = Color.Unspecified,
        onSurfaceVariant = Color.Unspecified,
        outline = Color.Unspecified,
        outlineVariant = Color.Unspecified,
        inverseSurface = Color.Unspecified,
        inverseOnSurface = Color.Unspecified,
        inversePrimary = Color.Unspecified,
        scrim = Color.Unspecified
    )
}

fun fintrackLightColors() = FintrackColors(
    primary = TealPrimary,
    onPrimary = Color.White,
    primaryContainer = TealPrimary200,
    onPrimaryContainer = DarkNeutral,
    secondary = OrangeAccent,
    onSecondary = Color.White,
    secondaryContainer = OrangeAccent300,
    onSecondaryContainer = DarkNeutral,
    tertiary = Success,
    onTertiary = Color.White,
    tertiaryContainer = Success200,
    onTertiaryContainer = DarkNeutral,
    error = Error,
    onError = Color.White,
    errorContainer = Error300,
    onErrorContainer = DarkNeutral,
    background = LightNeutral50,
    onBackground = DarkNeutral,
    surface = Color.White,
    onSurface = DarkNeutral,
    surfaceVariant = LightNeutral100,
    onSurfaceVariant = DarkNeutral400,
    outline = LightNeutral300,
    outlineVariant = LightNeutral200,
    inverseSurface = DarkNeutral,
    inverseOnSurface = LightNeutral50,
    inversePrimary = TealPrimary200,
    scrim = Color(0x66000000)
)

fun fintrackDarkColors() = FintrackColors(
    primary = TealPrimary200,
    onPrimary = DarkNeutral,
    primaryContainer = TealPrimary300,
    onPrimaryContainer = Color.White,
    secondary = OrangeAccent200,
    onSecondary = DarkNeutral,
    secondaryContainer = OrangeAccent,
    onSecondaryContainer = Color.White,
    tertiary = Success200,
    onTertiary = DarkNeutral,
    tertiaryContainer = Success,
    onTertiaryContainer = Color.White,
    error = Error200,
    onError = DarkNeutral,
    errorContainer = Error,
    onErrorContainer = Color.White,
    background = DarkNeutral600,
    onBackground = LightNeutral50,
    surface = DarkNeutral,
    onSurface = LightNeutral100,
    surfaceVariant = DarkNeutral500,
    onSurfaceVariant = DarkNeutral300,
    outline = DarkNeutral400,
    outlineVariant = DarkNeutral500,
    inverseSurface = LightNeutral50,
    inverseOnSurface = DarkNeutral,
    inversePrimary = TealPrimary,
    scrim = Color(0x99000000)
)

fun ColorScheme.asFintrackColors() = FintrackColors(
    primary = primary,
    onPrimary = onPrimary,
    primaryContainer = primaryContainer,
    onPrimaryContainer = onPrimaryContainer,
    secondary = secondary,
    onSecondary = onSecondary,
    secondaryContainer = secondaryContainer,
    onSecondaryContainer = onSecondaryContainer,
    tertiary = tertiary,
    onTertiary = onTertiary,
    tertiaryContainer = tertiaryContainer,
    onTertiaryContainer = onTertiaryContainer,
    error = error,
    onError = onError,
    errorContainer = errorContainer,
    onErrorContainer = onErrorContainer,
    background = background,
    onBackground = onBackground,
    surface = surface,
    onSurface = onSurface,
    surfaceVariant = surfaceVariant,
    onSurfaceVariant = onSurfaceVariant,
    outline = outline,
    outlineVariant = outlineVariant,
    inverseSurface = inverseSurface,
    inverseOnSurface = inverseOnSurface,
    inversePrimary = inversePrimary,
    scrim = scrim
)

fun FintrackColors.toMaterialScheme(isDark: Boolean): ColorScheme =
    if (isDark) {
        darkColorScheme(
            primary = primary,
            onPrimary = onPrimary,
            primaryContainer = primaryContainer,
            onPrimaryContainer = onPrimaryContainer,
            secondary = secondary,
            onSecondary = onSecondary,
            secondaryContainer = secondaryContainer,
            onSecondaryContainer = onSecondaryContainer,
            tertiary = tertiary,
            onTertiary = onTertiary,
            tertiaryContainer = tertiaryContainer,
            onTertiaryContainer = onTertiaryContainer,
            error = error,
            onError = onError,
            errorContainer = errorContainer,
            onErrorContainer = onErrorContainer,
            background = background,
            onBackground = onBackground,
            surface = surface,
            onSurface = onSurface,
            surfaceVariant = surfaceVariant,
            onSurfaceVariant = onSurfaceVariant,
            outline = outline,
            outlineVariant = outlineVariant,
            inverseSurface = inverseSurface,
            inverseOnSurface = inverseOnSurface,
            inversePrimary = inversePrimary,
            scrim = scrim
        )
    } else {
        lightColorScheme(
            primary = primary,
            onPrimary = onPrimary,
            primaryContainer = primaryContainer,
            onPrimaryContainer = onPrimaryContainer,
            secondary = secondary,
            onSecondary = onSecondary,
            secondaryContainer = secondaryContainer,
            onSecondaryContainer = onSecondaryContainer,
            tertiary = tertiary,
            onTertiary = onTertiary,
            tertiaryContainer = tertiaryContainer,
            onTertiaryContainer = onTertiaryContainer,
            error = error,
            onError = onError,
            errorContainer = errorContainer,
            onErrorContainer = onErrorContainer,
            background = background,
            onBackground = onBackground,
            surface = surface,
            onSurface = onSurface,
            surfaceVariant = surfaceVariant,
            onSurfaceVariant = onSurfaceVariant,
            outline = outline,
            outlineVariant = outlineVariant,
            inverseSurface = inverseSurface,
            inverseOnSurface = inverseOnSurface,
            inversePrimary = inversePrimary,
            scrim = scrim
        )
    }